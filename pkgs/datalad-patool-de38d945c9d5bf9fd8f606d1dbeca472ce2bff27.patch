diff --git a/datalad/support/archive_utils_patool.py b/datalad/support/archive_utils_patool.py
index 32d473808..fbbe4826d 100644
--- a/datalad/support/archive_utils_patool.py
+++ b/datalad/support/archive_utils_patool.py
@@ -63,6 +63,16 @@ from ..utils import on_windows

 _runner = WitlessRunner()

+check_existing_filename = None
+check_archive_filelist = None
+try: # define check_existing_filename from patool >= 2.0.0
+    check_existing_filename = patoolib.fileutil.check_existing_filename
+    check_archive_filelist = patoolib.fileutil.check_archive_filelist
+except Exception as e: # fallback to version <2.0.0
+    check_existing_filename = patoolib.util.check_existing_filename
+    check_archive_filelist = patoolib.util.check_archive_filelist
+
+

 def _patool_run(cmd, verbosity=0, **kwargs):
     """Decorated runner for patool so it doesn't spit out outputs to stdout"""
@@ -132,8 +142,8 @@ def decompress_file(archive, dir_):
     with swallow_outputs() as cmo:
         archive = ensure_bytes(archive)
         dir_ = ensure_bytes(dir_)
-        patoolib.util.check_existing_filename(archive)
-        patoolib.util.check_existing_filename(dir_, onlyfiles=False)
+        check_existing_filename(archive)
+        check_existing_filename(dir_, onlyfiles=False)
         # Call protected one to avoid the checks on existence on unixified path
         outdir = unixify_path(dir_)
         # should be supplied in PY3 to avoid b''
@@ -201,8 +211,8 @@ def compress_files(files, archive, path=None, overwrite=True):
     with swallow_outputs() as cmo:
         with chpwd(path):
             if not overwrite:
-                patoolib.util.check_new_filename(archive)
-            patoolib.util.check_archive_filelist(files)
+                check_new_filename(archive)
+            check_archive_filelist(files)
             # Call protected one to avoid the checks on existence on unixified path
             patoolib._create_archive(unixify_path(archive),
                                      [unixify_path(f) for f in files],
